# -*- coding: utf-8 -*-
"""Hoang Anh Nguyễn (Jolie) final project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1MBKu642n9b5bPTITQ2WmYxJZblNzGeo2

**Stating the reseach question**

Is there a relationship between the heights of parents and their child, and how does gender influence the child’s height?

**Download the data**
"""

import requests

url = "https://www.kaggle.com/api/v1/datasets/download/fundal/galtons-height-data-multiple-linear-regression"

file_path = "galtons-height-data-multiple-linear-regression.zip"

response = requests.get(url, stream=True)
if response.status_code == 200:
    with open(file_path, "wb") as file:
        for chunk in response.iter_content(chunk_size=1024):
            file.write(chunk)
    print(f"Downloaded dataset to {file_path}")
else:
    print("Failed to download dataset. Check the URL or permissions.")

import zipfile
import os

zip_path = "galtons-height-data-multiple-linear-regression.zip"
extract_path = "galtons-data"

with zipfile.ZipFile(zip_path, 'r') as zip_ref:
    zip_ref.extractall(extract_path)
print(f"Dataset extracted to {extract_path}")

import pandas as pd

file_path = "galtons-data/Galton_Family_Heights.csv"
data = pd.read_csv(file_path)

print(data.head())

file_path = "galtons-data/Galton_Family_Heights.csv"
data = pd.read_csv(file_path)
print(data.head())

"""**Explore and Clean the Data**"""

print(data.info())
print(data.describe())
print(data.shape)

data = data.dropna()
print(data.columns)

"""**Descriptive Analysis**"""

print(data[['Father_height', 'Mother_height', 'Child_height']].mean())

import matplotlib.pyplot as plt

plt.scatter(data['Father_height'], data['Child_height'], label="Father-Child")
plt.scatter(data['Mother_height'], data['Child_height'], label="Mother-Child", alpha=0.7)
plt.legend()
plt.title("Parent Heights vs Child Height")
plt.xlabel("Parent Height")
plt.ylabel("Child Height")
plt.show()

data.groupby('gender')['Child_height'].mean().plot(kind='bar')
plt.title("Average Child Height by Gender")
plt.ylabel("Height")
plt.show()

"""**Hypothesis testing**

Null hypothesis: There is no linear relationship between parent's height and their child's height.
"""

from scipy.stats import pearsonr

corr_father, p_father = pearsonr(data['Father_height'], data['Child_height'])
corr_mother, p_mother = pearsonr(data['Mother_height'], data['Child_height'])

print(f"Father-Child Correlation: {corr_father}, P-value: {p_father}")
print(f"Mother-Child Correlation: {corr_mother}, P-value: {p_mother}")

"""Null hypothesis: There is no difference in the average heights of boys and girls."""

from scipy.stats import ttest_ind

male_heights = data[data['gender'] == 1]['Child_height']
female_heights = data[data['gender'] == 0]['Child_height']

t_stat, p_val = ttest_ind(male_heights, female_heights)
print(f"T-test Statistic: {t_stat}, P-value: {p_val}")

"""**Linear Regression**"""

from sklearn.linear_model import LinearRegression

X = data[['Father_height', 'Mother_height']]
y = data['Child_height']

model = LinearRegression()
model.fit(X, y)

print(f"Intercept: {model.intercept_}")
print(f"Father Height Coefficient: {model.coef_[0]}")
print(f"Mother Height Coefficient: {model.coef_[1]}")

from sklearn.metrics import r2_score

predictions = model.predict(X)
print(f"R² Score: {r2_score(y, predictions)}")

import numpy as np
import matplotlib.pyplot as plt

plt.scatter(y, predictions, alpha=0.6, label="Predictions")
plt.title("Actual vs Predicted Child Heights")
plt.xlabel("Actual Height")
plt.ylabel("Predicted Height")

min_height = min(y.min(), predictions.min())
max_height = max(y.max(), predictions.max())
line_x = np.linspace(min_height, max_height, 100)
plt.plot(line_x, line_x, color='red', label="Perfect Prediction Line")

plt.legend()
plt.show()

from sklearn.linear_model import LinearRegression
from sklearn.metrics import r2_score

X = data[['Father_height', 'Mother_height', 'gender']]
y = data['Child_height']

model = LinearRegression()
model.fit(X, y)

print(f"Intercept: {model.intercept_}")
print(f"Father Height Coefficient: {model.coef_[0]}")
print(f"Mother Height Coefficient: {model.coef_[1]}")
print(f"Gender Coefficient: {model.coef_[2]}")

predictions = model.predict(X)
print(f"R² Score: {r2_score(y, predictions)}")

"""**Logistic Regression**"""

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report

X = data[['Child_height']]
y = data['gender']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

log_model = LogisticRegression()
log_model.fit(X_train, y_train)

print(f"Intercept: {log_model.intercept_[0]}")
print(f"Coefficient for Child Height: {log_model.coef_[0][0]}")

y_pred = log_model.predict(X_test)

accuracy = accuracy_score(y_test, y_pred)
conf_matrix = confusion_matrix(y_test, y_pred)

print(f"Accuracy: {accuracy}")
print("Confusion Matrix:")
print(conf_matrix)

print("Classification Report:")
print(classification_report(y_test, y_pred))

import numpy as np
import matplotlib.pyplot as plt

child_heights = np.linspace(data['Child_height'].min(), data['Child_height'].max(), 300).reshape(-1, 1)
gender_probabilities = log_model.predict_proba(child_heights)[:, 1]

plt.figure(figsize=(8, 6))
plt.scatter(data['Child_height'], data['gender'], alpha=0.6, label="Actual Data")
plt.plot(child_heights, gender_probabilities, color='red', label="Logistic Regression Curve")
plt.title("Logistic Regression: Predicting Gender Based on Child Height")
plt.xlabel("Child Height (inches)")
plt.ylabel("Probability of Being Male")
plt.legend()
plt.show()

"""**Flow Chart**"""

import matplotlib.pyplot as plt
import networkx as nx

workflow = nx.DiGraph()

steps = [
    "Start",
    "Load Data",
    "Clean Data",
    "Perform Descriptive Analysis",
    "Conduct Hypothesis Testing",
    "Run Regression Models",
    "Create Visualizations",
    "Save Results & Write Report",
    "End"
]

for i in range(len(steps) - 1):
    workflow.add_edge(steps[i], steps[i + 1])

plt.figure(figsize=(10, 6))
pos = nx.shell_layout(workflow)
nx.draw(workflow, pos, with_labels=True, node_size=3000, node_color="pink", font_size=8, font_weight="bold", arrows=True)
plt.title("Workflow Flowchart", fontsize=17)
plt.show()

"""**save**"""

data.describe().to_csv("final project cs.csv")